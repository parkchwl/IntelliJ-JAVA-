/* 생성자는 인스턴스가 생성될 때 호출되는 '인스턴스 초기화 메서드'이다. 따라서 인스턴스 변수의 초기화 작업에 주로 사용되며,
인스턴스 생성 시에 실행되어야 할 작업을 위해서도 사용된다. (인스턴스 초기화란, 인스턴스 변수들을 초기화 하는 것을 뜻한다.)
생성자 역시 메서드처럼 클래스 내에 선언되며, 구조도 메서드와 유사하지만 리턴값이 없다는 점이 다르다. 그렇다고 해서 생성자 앞에 리턴값이 없음을 뜻하는
키워드 void를 사용하지 않고, 단지 아무 것도 적지 않는다. 생성자의 조건은 다음과 같다.
to_ 1.생성자의 이름은 클래스의 이름과 같아야 한다.
to_ 2.생성자는 리턴 값이 없다.
생성자는 단순히 인스턴스변수들의 초기화에 사용되는 조금 특별한 메서드일 뿐이다.

Card c = new Card();
[1] 연산자 new에 의해서 메모리(heap)에 Card클래스의 인스턴스가 생성된다.
[2] 생성자 Card()가 호출되어 수행된다.
[3] 연산자 new의 결과로, 생성된 Card인스턴스의 주소가 반환되어 참조변수 c에 저장된다.
지금까지 인스턴스를 생성하기 위해 사용해왔던 '클래스이름()'이 바로 생성자이다.
인스턴스를 생설할 때는 반드시 클래스 내에 정의된 생성자 중의  하나를 선택하여 지정해주어야 한다.
 */
class Data1 {
    int value;
}
class Data2 {
    int value;

    Data2(int x)    {       // 매개변수가 있는 생성자이다.
        value = x;
    }
}
class ConstructorTest {
    public static void main(String [] args) {
        Data1 d1 = new Data1();
        //Data2 d2 = new Data2();     // compile error가 발생한다. || Data2 d2 = new Data2(10); // OK.
    }
}
/* 이 오류는 Data2에서 Data2()라는 생성자를 찾을 수 없다는 내용의 메세지인데, Data2에 생성자 Data2()가 정의되어 있지 않기 때문에 에러가 발생한 것이다.
Data1의 인스턴스를 생성하는 코드에는 에러가 없는데, Data2의 인스턴스를 생성하는 코드에서 에러가 발생하는 이유는
Data1에는 정의되어 있는 생성자가 하나도 없으므로 컴파일러가 기본 생성자를 추가해주었지만, Data2에는 이미 생성자 Data2(int x)가 정의되어 있으므로
기본 생성자가 추가되지 않았기 때문이다. 컴파일러가 자동적으로 기본 생성자를 추가해주는 경우는 '클래스 내에 생성자가 하나도 없을 때'뿐이라는 것을 명심하자.
 */