/* 메서드는 크게 두 부분, '선언부'와 '구현부'로 이루어져 있다. 메서드를 정의한다는 것은 선언부와 구현부를 작성하는 것을 뜻한다.
to_ 메서드의 선언부는 '메서드의 이름'과 '매개변수 선언', 그리고 '반환타입'으로 구성되어 있다.
메서드가 작업을 수행하기 위해 어떤 값들을 필요로 하고 작업의 결과로 어떤 타입의 값을 반환하는지에 대한 정보를 제공한다.
to__ #1.메서드 선언부 (method declaration, method header)
to__   "int"   "add"     "(int x, int y)"   {
to__ "반환타입" "메서드 이름"  "매개변수선언(입력값)"
        int result = x + y;
        return result; // 결과를 반환한다
}

to__ #1-2.매개변수 선언 (parameter declaration)
매개변수는 메서드가 작업을 수행하는데 필요한 값들(입력)을 제공받기 위한 것이며, 필요한 값의 개수만큼 변수를 선언하며 각 변수 간의 구분은 쉼표 ','를 사용한다
한 가지 주의할 점은 일반적인 변수 선언과 달리 두 변수의 타입이 같아도 변수의 타입을 생략할 수 없다.
to_ int add(int x, int y) {...}     // OK.
to_ int add(int x, y) {...}         // 에러. 매개변수 y의 타입이 존재하지 않는다.
선언할 수 있는 매개변수의 개수는 거의 제한이 없지만, 만일 입력해야할 값의 개수가 많은 경우에는 배열이나 참조변수를 사용하면 된다.
만일 값을 전혀 입력받을 필요가 없다면 괄호() 안에 아무것도 적지 않는다.

to__ #1-3.메서드의 이름(method name)
메서드의 이름도 앞서 배운 변수의 명명규칠대로 작성하면 된다. 메서드는 특정 작업을 수행하므로 메서드의 이름은'add'처럼 동사인 경우가 많으며,
이름만으로도 메서드의 기능을 쉽게 알 수 있도록 함축적이면서도 의미있는 이름을 짓도록 노력해야 한다.

to__ #1-4.반환타입 (return type)
메서드의 작업수행 결과(출력)인 '반환값(return value)'의 타입을 적는다. 반환값이 없는 경우 반환타입으로 'void'를 적어야한다.

to__ #2-1.메서드의 구현부 (method body,메서드 몸통)
메서드의 선언부 다음에 오는 괄호{}를 '메서드의 구현부'라고 하는데, 여기에 메서드를 호출했을 때 수행될 문장들을 넣는다.
앞서 작성한 코드들은 모두 main메서드의 구현부{}에 속한 것들이다.

to__ #2-2.return 문  ** 메서드의 반환타입이 'void'가 아닌 경우, 구현부 {}안에 반환값;'이 반드시 포함되어 있어야 한다.**
이 문장은 작업을 수행한 결과인 반환값을 호출한 메서드로 전달하는데, 이 값의 타입은 반환타입과 일치하거나 적어도 자동 형변환이 가능한 것이어야 한다.
여러 개의 변수를 선언할 수 있는 매개변수와 달리 return문은 단 하나의 값만 반환할 수 있는데, 메서드로의 입력(매개변수)은 여러 개일 수도 있어도
출력(반환값)은 최대 하나만 허용하는 것이다. 위의 코드에서 'return result;'는 변수 result에 저장된 값을 호출한 메서드로 반환한다.
변수 result의 타입이 int이므로 메서드 add의 반환타입이 일치하는 것을 알 수 있다.

to__ #2-3.지역변수(local variable)
메서드 내에 선언된 변수들은 그 메서드 내에서만 사용할 수 있으므로 서로 다른 메서드라면 같은 이름의 변수를 선언해도 된다.
이처럼 메서드 내에 선언된 변수를 지역변수라고 한다.
int add(int x, int y) {     // 지역변수는 x, y
int result = x + y;         // 지역변수는 result
    return result;
}
to__ #3.메서드의 호출
메서드를 정의했어도 호출되지 않으면 아무 일도 일어나지 않는다. 메서드를 호출해야만 구현부{}의 문장들이 수행된다. 메서드를 호출하는 방법은 다음과 같다.
메서드이름(값1,값2, ...); //메서드를 호출하는 방법
print99danAll();     // void print99danAll()을 호출한다.
int result = add(3, 5); //int add(int x, int y)를 호출하고, 결과를 result에 저장한다.

to__ #3-1.인자(argument)와 매개변수(parameter)
메서드를 호출할 때 괄호()안에 지정해준 값들을 '인자' 또는 '인수'라고 하는데, 인자의 개수와 순서는 호출된 메서드에 선언된 매개변수와 일치해야 한다.
그리고 인자는 메서드가 호출되면서 매개변수에 대입되므로, 인자의 타입은 매개변수의 타입과 일치하거나 자동 형변환이 가능한 것이어야 한다.

to__ #3-2..메서드의 실행흐름
같은 클래스 내의 메서드끼리는 참조변수를 사용하지 않고도 서로 호출이 가능하지만 static메서드는 같은 클래스 내의 인스턴스 메서드를 호출할 수 없다.
*/
class CallStackTest {
    public static void main(String [] args) {
        firstMethod();  //static메서드는 객체 상관없이 호출가능하다.
    }

    static void firstMethod() {
        secondMethod();
    }

    static void secondMethod() {
        System.out.println("secondMethod()");
    }
}
/* main()이 firstMethod()를 호출하고 firstMethod()는 secondMethod()를 호출한다.
to__ 객체를 생성하지 않고도 메서드를 호출할 수 있으려면, 메서드 앞에 'static'을 붙여야한다.
 */