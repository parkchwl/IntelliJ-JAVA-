/* 프로그램이 실행 중 어떤 원인에 의해서 오작동을 하거나 비정상적으로 종료되는 경우가 있다. 이러한 결과를 초해하는 원인을 프로그램 에러 또는 오류라고 한다.
이를 발생시점에 따라 '컴파일 에러(compile-time error)'와 '런타임 에러(runtime error)'로 나눌 수 있는데,
글자 그대로 '컴파일 에러'는 컴파일 할 때 발생하는 에러이고 프로그램의 실행도중에 발생하는 에러를 '런타임 에러'라고 한다.
이 외에도 '논리적 에러(logical error)'가 있는데, 컴파일도 잘되고 실행도 잘되지만 의도한 것과 다르게 동작하는 것을 말한다.
예를 들어, 창고의 재고가 음수가 된다던가, 게임 프로그램에서 비행기가 총알을 맞아도 죽지 않는 경우가 이에 해당된다.
컴파일 에러 : 컴파일시에 발생하는 에러
런타임 에러 : 실행 시에 발생하는 에러
논리적 에러 : 실행은 되지만, 의도와 다르게 동작하는 것

소스코드를 컴파일 하면 컴파일러가 소스코드(*.java)에 대해 오타나 잘못된 구문, 자료형 체크 등의 기본적인 검사를 수행하여 오류가 있는지를 알려 준다.
컴파일러가 알려 준 에러들을 모두 수정해서 컴파일을 성공적으로 마치고 나면, 클래스 파일(*.class)이 생성되고, 생성된 클래스 파일을 실행할 수 있게 되는 것이다.
하지만 컴파일을 에러없이 성공적으로 마쳤다고 해서 프로그램의 실행 시에도 에러가 발생하지 않는 것은 아니다.
컴파일러가 소스코드의 기본적인 사항은 컴파일 시에 모두 걸러 줄 수는 있지만, 실행도중에 발생할 수 있는 잠재적인 오류까지 검사할 수 없기 때문에 컴파일은 잘되었어도
실행 중에 에러에 의해서 잘못된 결과를 얻거나 프로그램이 비정상적으로 종료될 수 있다. 여러분은 이미 실행도중에 발생하는 런타임 에러를 여러 번 경험했을 것이다.
예를 들면 프로그램이 실행 중 동작을 멈춘 상태로 오랜시간 지속되거나, 갑자기 프로그램이 실행을 멈추고 종료되는 경우 등이 이에 해당한다.
런타임 에러를 방지하기 위해서는 프로그램의 실행도중 발생할 수 있는 모든 경우의 수를 고려하여 이에 대한 대비를 하는 것이 필요하다.
자바에서는 실행 시(runtime)발생할 수 있는 프로그램 오류를 '에러(error)'와 '예외(exception)', 두 가지로 구분하였다.
에러는 메모리 부족(OutOfMemoryError)이나 스택오버플로우(StackOverflowError)와 같이 일단 발생하면 복구할 수 없는 심각한 오류이고,
예외는 발생하더라도 수습될 수 있는 비교적 덜 심각한 것이다.
에러가 발생하면, 프로그램의 비정상적인 종료를 막을 길이 없지만,
예외는 발생하더라도 프로그래머가 이에 대한 적절한 코드를 미리 작성해 놓음으로써 프로그램의 비정상적인 종료를 막을 수 있다.
에러(error)     : 프로그램 코드에 의해서 수습될 수 없는 심각한 오류
예외(exception) : 프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류

#1.예외처리하기 - try - catch 문
프로그램의 실행도중에 발생하는 에러는 어쩔 수 없지만, 예외는 프로그래머가 이에 대한 처리를 미리 해주어야 한다.
예외처리(exception handling)란, 프로그램 실행 시 발생할 수 있는 예기치 못한 예외의 발생에 대비한 코드를 작성하는 것이며,
예외처리의 목적은 예외의 발생으로 인한 실행 중인 프로그램의 갑작스런 비정상 종료를 막고, 정상적인 실행상태를 유지할 수 있도록 하는 것이다.
    예외처리(exception handling)의
        정의 : 프로그램 실행 시 발생할 수 있는 예외에 대비한 코드를 작성하는 것
        목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것
        |참고| 에러와 예외는 모두 실행 시(runtime) 발생하는 오류이다.

발생한 예외를 처리하지 못하면, 프로그램은 비정상적으로 종료되며, 처리되지 못한 예외(uncaught exception)는 JVM의 '예외처리기'가 받아서 예외의 원인을 출력한다.
, 예외를 처리하기 위해서는 try - catch 문을 사용하며, 그 구조는 다음과 같다.
    try {
        //예외가 발생할 가능성이 있는 문장들을 넣는다.
    } catch (Exception1 e1) {
        // Exception1이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
    } catch (Exception2 e2) {
        // Exception2가 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
    } catch (ExceptionN eN) {
        // ExceptionN이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
    }
하나의 try블럭 다음에는 여러 종류의 예외를 처리할 수 있도록 하나 이상의 catch블럭이 올 수 있으며,
이 중 발생한 예외의 종류와 일치하는 단 한개의 catch블럭만 수행된다.
발생한 예외의 종류와 일치하는 catch블럭이 없으면 예외는 처리되지 않는다.
|참고| if문과 달리, try블럭이나 catch블럭 내에 포함된 문장이 하나뿐이어도 괄호{}를 생략할 수 없다.
 */
class ExceptionEx1 {
    public static void main(String[] args) {
        try {
            try {
            } catch (Exception e) {
            }
        } catch (Exception e) {
                                //          try {   } catch (Exception e) { } // 에러. 변수 e가 중복 선언되었다.
        } // try-catch의 끝
        try {
        } catch (Exception e) {
        } //try-catch의 끝
    } //main 메서드의 끝
}
/* 위의 예제는 아무 일도 하지 않는다. 단순히 try-catch문의 사용 예를 보여 주기 위해서 작성한 코드이다. 이처럼 하나의 메서드 내에 여러 개의 try-catch문이
사용될 수 있으며, try 블럭 또는 catch블럭에 또 다른 try-catch문이 포함될 수 있다. catch블럭 내의 코드에서도 예외가 발생할 수 있기 때문이다.
catch블럭의 괄호 내에 선언된 변수는 catch블럭 내에서만 유효하기 때문에, 위의 모든 catch블럭에 참조변수'e'하나 만을 사용해도 된다.
그러나 catch블럭 내에 또 하나의 try-catch문이 포함된 경우, 같은 이름의 참조변수를 사용해서는 안된다.
각 catch블럭에 선언된 두 참조변수의 영역이 서로 겹치므로 다른 이름을 사용해야만 서로 구별되기 때문이다.
따라서 위의 예제에서 catch블랙 내의 try-catch문에 선언되어 있는 참조변수의 이름을 'e'가 아닌 다른 것으로 바꿔야 한다.
 */